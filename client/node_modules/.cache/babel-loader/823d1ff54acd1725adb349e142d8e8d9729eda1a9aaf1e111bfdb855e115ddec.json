{"ast":null,"code":"// Performance Analytics System\nexport class Analytics {\n  constructor() {\n    this.performanceData = {\n      questions: [],\n      sessions: [],\n      categories: {},\n      timeTracking: {}\n    };\n  }\n  trackQuestion(question) {\n    this.performanceData.questions.push({\n      ...question,\n      timestamp: new Date(),\n      timeSpent: question.endTime - question.startTime\n    });\n\n    // Update category statistics\n    if (!this.performanceData.categories[question.category]) {\n      this.performanceData.categories[question.category] = {\n        total: 0,\n        correct: 0,\n        averageTime: 0,\n        commonMistakes: {}\n      };\n    }\n    const category = this.performanceData.categories[question.category];\n    category.total += 1;\n    if (question.score === 1) {\n      category.correct += 1;\n    }\n\n    // Update average time\n    category.averageTime = (category.averageTime * (category.total - 1) + question.timeSpent) / category.total;\n\n    // Track common mistakes\n    if (question.score < 1) {\n      const mistake = this.identifyMistake(question);\n      if (mistake) {\n        category.commonMistakes[mistake] = (category.commonMistakes[mistake] || 0) + 1;\n      }\n    }\n  }\n  trackSession(session) {\n    this.performanceData.sessions.push({\n      ...session,\n      timestamp: new Date()\n    });\n  }\n  identifyMistake(question) {\n    // Implement mistake identification logic\n    if (question.category === 'BASIC_OPERATIONS') {\n      const userNum = parseFloat(question.userAnswer);\n      const correctNum = parseFloat(question.answer);\n      if (Math.abs(userNum - correctNum) === 1) {\n        return 'off_by_one';\n      }\n      if (userNum === correctNum * 2) {\n        return 'doubled';\n      }\n    }\n    return null;\n  }\n  generatePerformanceReport() {\n    return {\n      overall: this.calculateOverallStats(),\n      byCategory: this.calculateCategoryStats(),\n      trends: this.analyzeTrends(),\n      recommendations: this.generateRecommendations()\n    };\n  }\n  calculateOverallStats() {\n    const questions = this.performanceData.questions;\n    const total = questions.length;\n    const correct = questions.filter(q => q.score === 1).length;\n    const averageTime = questions.reduce((sum, q) => sum + q.timeSpent, 0) / total;\n    return {\n      totalQuestions: total,\n      accuracy: total > 0 ? correct / total * 100 : 0,\n      averageTime,\n      completionRate: this.calculateCompletionRate()\n    };\n  }\n  calculateCategoryStats() {\n    const stats = {};\n    Object.entries(this.performanceData.categories).forEach(([category, data]) => {\n      stats[category] = {\n        accuracy: data.correct / data.total * 100,\n        averageTime: data.averageTime,\n        commonMistakes: this.getTopMistakes(data.commonMistakes),\n        questionCount: data.total\n      };\n    });\n    return stats;\n  }\n  analyzeTrends() {\n    const trends = {\n      accuracy: this.calculateAccuracyTrend(),\n      timeSpent: this.calculateTimeTrend(),\n      categoryProgress: this.calculateCategoryProgress()\n    };\n    return trends;\n  }\n  calculateAccuracyTrend() {\n    const questions = this.performanceData.questions;\n    const recentQuestions = questions.slice(-10);\n    const olderQuestions = questions.slice(-20, -10);\n    const recentAccuracy = this.calculateAverageAccuracy(recentQuestions);\n    const olderAccuracy = this.calculateAverageAccuracy(olderQuestions);\n    return {\n      trend: recentAccuracy - olderAccuracy,\n      recent: recentAccuracy,\n      older: olderAccuracy\n    };\n  }\n  calculateTimeTrend() {\n    const questions = this.performanceData.questions;\n    const recentQuestions = questions.slice(-10);\n    const olderQuestions = questions.slice(-20, -10);\n    const recentTime = this.calculateAverageTime(recentQuestions);\n    const olderTime = this.calculateAverageTime(olderQuestions);\n    return {\n      trend: recentTime - olderTime,\n      recent: recentTime,\n      older: olderTime\n    };\n  }\n  calculateCategoryProgress() {\n    const progress = {};\n    Object.entries(this.performanceData.categories).forEach(([category, data]) => {\n      const recentQuestions = this.performanceData.questions.filter(q => q.category === category).slice(-5);\n      const recentAccuracy = this.calculateAverageAccuracy(recentQuestions);\n      progress[category] = {\n        current: recentAccuracy,\n        improvement: recentAccuracy - data.correct / data.total * 100\n      };\n    });\n    return progress;\n  }\n  calculateAverageAccuracy(questions) {\n    if (questions.length === 0) return 0;\n    const correct = questions.filter(q => q.score === 1).length;\n    return correct / questions.length * 100;\n  }\n  calculateAverageTime(questions) {\n    if (questions.length === 0) return 0;\n    return questions.reduce((sum, q) => sum + q.timeSpent, 0) / questions.length;\n  }\n  calculateCompletionRate() {\n    const sessions = this.performanceData.sessions;\n    if (sessions.length === 0) return 0;\n    const completedSessions = sessions.filter(s => s.completed).length;\n    return completedSessions / sessions.length * 100;\n  }\n  getTopMistakes(mistakes) {\n    return Object.entries(mistakes).sort(([, a], [, b]) => b - a).slice(0, 3).map(([mistake, count]) => ({\n      mistake,\n      count\n    }));\n  }\n  generateRecommendations() {\n    const recommendations = [];\n    const stats = this.calculateCategoryStats();\n    const trends = this.analyzeTrends();\n\n    // Check for low performing categories\n    Object.entries(stats).forEach(([category, data]) => {\n      if (data.accuracy < 70) {\n        recommendations.push({\n          type: 'improvement',\n          category,\n          message: `Focus on improving ${category.toLowerCase()} skills. Current accuracy: ${data.accuracy.toFixed(1)}%`\n        });\n      }\n    });\n\n    // Check for time management issues\n    if (trends.timeSpent.trend > 0) {\n      recommendations.push({\n        type: 'time',\n        message: 'Consider spending less time on each question to improve efficiency'\n      });\n    }\n\n    // Check for common mistakes\n    Object.entries(stats).forEach(([category, data]) => {\n      if (data.commonMistakes.length > 0) {\n        recommendations.push({\n          type: 'mistake',\n          category,\n          message: `Review common mistakes in ${category.toLowerCase()}`\n        });\n      }\n    });\n    return recommendations;\n  }\n}","map":{"version":3,"names":["Analytics","constructor","performanceData","questions","sessions","categories","timeTracking","trackQuestion","question","push","timestamp","Date","timeSpent","endTime","startTime","category","total","correct","averageTime","commonMistakes","score","mistake","identifyMistake","trackSession","session","userNum","parseFloat","userAnswer","correctNum","answer","Math","abs","generatePerformanceReport","overall","calculateOverallStats","byCategory","calculateCategoryStats","trends","analyzeTrends","recommendations","generateRecommendations","length","filter","q","reduce","sum","totalQuestions","accuracy","completionRate","calculateCompletionRate","stats","Object","entries","forEach","data","getTopMistakes","questionCount","calculateAccuracyTrend","calculateTimeTrend","categoryProgress","calculateCategoryProgress","recentQuestions","slice","olderQuestions","recentAccuracy","calculateAverageAccuracy","olderAccuracy","trend","recent","older","recentTime","calculateAverageTime","olderTime","progress","current","improvement","completedSessions","s","completed","mistakes","sort","a","b","map","count","type","message","toLowerCase","toFixed"],"sources":["C:/Users/asus/OneDrive/Desktop/autom/client/src/utils/automation/analytics.js"],"sourcesContent":["// Performance Analytics System\r\nexport class Analytics {\r\n  constructor() {\r\n    this.performanceData = {\r\n      questions: [],\r\n      sessions: [],\r\n      categories: {},\r\n      timeTracking: {}\r\n    };\r\n  }\r\n\r\n  trackQuestion(question) {\r\n    this.performanceData.questions.push({\r\n      ...question,\r\n      timestamp: new Date(),\r\n      timeSpent: question.endTime - question.startTime\r\n    });\r\n\r\n    // Update category statistics\r\n    if (!this.performanceData.categories[question.category]) {\r\n      this.performanceData.categories[question.category] = {\r\n        total: 0,\r\n        correct: 0,\r\n        averageTime: 0,\r\n        commonMistakes: {}\r\n      };\r\n    }\r\n\r\n    const category = this.performanceData.categories[question.category];\r\n    category.total += 1;\r\n    if (question.score === 1) {\r\n      category.correct += 1;\r\n    }\r\n\r\n    // Update average time\r\n    category.averageTime = (\r\n      (category.averageTime * (category.total - 1) + question.timeSpent) / \r\n      category.total\r\n    );\r\n\r\n    // Track common mistakes\r\n    if (question.score < 1) {\r\n      const mistake = this.identifyMistake(question);\r\n      if (mistake) {\r\n        category.commonMistakes[mistake] = (category.commonMistakes[mistake] || 0) + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  trackSession(session) {\r\n    this.performanceData.sessions.push({\r\n      ...session,\r\n      timestamp: new Date()\r\n    });\r\n  }\r\n\r\n  identifyMistake(question) {\r\n    // Implement mistake identification logic\r\n    if (question.category === 'BASIC_OPERATIONS') {\r\n      const userNum = parseFloat(question.userAnswer);\r\n      const correctNum = parseFloat(question.answer);\r\n      \r\n      if (Math.abs(userNum - correctNum) === 1) {\r\n        return 'off_by_one';\r\n      }\r\n      if (userNum === correctNum * 2) {\r\n        return 'doubled';\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  generatePerformanceReport() {\r\n    return {\r\n      overall: this.calculateOverallStats(),\r\n      byCategory: this.calculateCategoryStats(),\r\n      trends: this.analyzeTrends(),\r\n      recommendations: this.generateRecommendations()\r\n    };\r\n  }\r\n\r\n  calculateOverallStats() {\r\n    const questions = this.performanceData.questions;\r\n    const total = questions.length;\r\n    const correct = questions.filter(q => q.score === 1).length;\r\n    const averageTime = questions.reduce((sum, q) => sum + q.timeSpent, 0) / total;\r\n\r\n    return {\r\n      totalQuestions: total,\r\n      accuracy: total > 0 ? (correct / total) * 100 : 0,\r\n      averageTime,\r\n      completionRate: this.calculateCompletionRate()\r\n    };\r\n  }\r\n\r\n  calculateCategoryStats() {\r\n    const stats = {};\r\n    Object.entries(this.performanceData.categories).forEach(([category, data]) => {\r\n      stats[category] = {\r\n        accuracy: (data.correct / data.total) * 100,\r\n        averageTime: data.averageTime,\r\n        commonMistakes: this.getTopMistakes(data.commonMistakes),\r\n        questionCount: data.total\r\n      };\r\n    });\r\n    return stats;\r\n  }\r\n\r\n  analyzeTrends() {\r\n    const trends = {\r\n      accuracy: this.calculateAccuracyTrend(),\r\n      timeSpent: this.calculateTimeTrend(),\r\n      categoryProgress: this.calculateCategoryProgress()\r\n    };\r\n    return trends;\r\n  }\r\n\r\n  calculateAccuracyTrend() {\r\n    const questions = this.performanceData.questions;\r\n    const recentQuestions = questions.slice(-10);\r\n    const olderQuestions = questions.slice(-20, -10);\r\n\r\n    const recentAccuracy = this.calculateAverageAccuracy(recentQuestions);\r\n    const olderAccuracy = this.calculateAverageAccuracy(olderQuestions);\r\n\r\n    return {\r\n      trend: recentAccuracy - olderAccuracy,\r\n      recent: recentAccuracy,\r\n      older: olderAccuracy\r\n    };\r\n  }\r\n\r\n  calculateTimeTrend() {\r\n    const questions = this.performanceData.questions;\r\n    const recentQuestions = questions.slice(-10);\r\n    const olderQuestions = questions.slice(-20, -10);\r\n\r\n    const recentTime = this.calculateAverageTime(recentQuestions);\r\n    const olderTime = this.calculateAverageTime(olderQuestions);\r\n\r\n    return {\r\n      trend: recentTime - olderTime,\r\n      recent: recentTime,\r\n      older: olderTime\r\n    };\r\n  }\r\n\r\n  calculateCategoryProgress() {\r\n    const progress = {};\r\n    Object.entries(this.performanceData.categories).forEach(([category, data]) => {\r\n      const recentQuestions = this.performanceData.questions\r\n        .filter(q => q.category === category)\r\n        .slice(-5);\r\n      \r\n      const recentAccuracy = this.calculateAverageAccuracy(recentQuestions);\r\n      progress[category] = {\r\n        current: recentAccuracy,\r\n        improvement: recentAccuracy - (data.correct / data.total) * 100\r\n      };\r\n    });\r\n    return progress;\r\n  }\r\n\r\n  calculateAverageAccuracy(questions) {\r\n    if (questions.length === 0) return 0;\r\n    const correct = questions.filter(q => q.score === 1).length;\r\n    return (correct / questions.length) * 100;\r\n  }\r\n\r\n  calculateAverageTime(questions) {\r\n    if (questions.length === 0) return 0;\r\n    return questions.reduce((sum, q) => sum + q.timeSpent, 0) / questions.length;\r\n  }\r\n\r\n  calculateCompletionRate() {\r\n    const sessions = this.performanceData.sessions;\r\n    if (sessions.length === 0) return 0;\r\n    \r\n    const completedSessions = sessions.filter(s => s.completed).length;\r\n    return (completedSessions / sessions.length) * 100;\r\n  }\r\n\r\n  getTopMistakes(mistakes) {\r\n    return Object.entries(mistakes)\r\n      .sort(([, a], [, b]) => b - a)\r\n      .slice(0, 3)\r\n      .map(([mistake, count]) => ({ mistake, count }));\r\n  }\r\n\r\n  generateRecommendations() {\r\n    const recommendations = [];\r\n    const stats = this.calculateCategoryStats();\r\n    const trends = this.analyzeTrends();\r\n\r\n    // Check for low performing categories\r\n    Object.entries(stats).forEach(([category, data]) => {\r\n      if (data.accuracy < 70) {\r\n        recommendations.push({\r\n          type: 'improvement',\r\n          category,\r\n          message: `Focus on improving ${category.toLowerCase()} skills. Current accuracy: ${data.accuracy.toFixed(1)}%`\r\n        });\r\n      }\r\n    });\r\n\r\n    // Check for time management issues\r\n    if (trends.timeSpent.trend > 0) {\r\n      recommendations.push({\r\n        type: 'time',\r\n        message: 'Consider spending less time on each question to improve efficiency'\r\n      });\r\n    }\r\n\r\n    // Check for common mistakes\r\n    Object.entries(stats).forEach(([category, data]) => {\r\n      if (data.commonMistakes.length > 0) {\r\n        recommendations.push({\r\n          type: 'mistake',\r\n          category,\r\n          message: `Review common mistakes in ${category.toLowerCase()}`\r\n        });\r\n      }\r\n    });\r\n\r\n    return recommendations;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}