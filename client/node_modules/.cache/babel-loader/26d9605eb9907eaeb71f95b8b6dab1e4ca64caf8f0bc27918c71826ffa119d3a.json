{"ast":null,"code":"// Automated Grading and Feedback System\nconst FEEDBACK_TEMPLATES = {\n  CORRECT: [\"Excellent work!\", \"Perfect answer!\", \"You've got it!\", \"Well done!\", \"That's correct!\"],\n  PARTIAL: [\"Close! Let's try again.\", \"Almost there!\", \"You're on the right track.\", \"Good attempt, but not quite.\", \"Getting closer!\"],\n  INCORRECT: [\"Let's try a different approach.\", \"Not quite right. Would you like a hint?\", \"Let's review this concept.\", \"Try breaking it down into steps.\", \"Remember to check your work.\"]\n};\nexport class GradingSystem {\n  constructor() {\n    this.feedbackHistory = [];\n  }\n  gradeAnswer(userAnswer, correctAnswer, questionType) {\n    const result = {\n      isCorrect: false,\n      score: 0,\n      feedback: '',\n      partialCredit: false\n    };\n\n    // Normalize answers for comparison\n    const normalizedUserAnswer = this.normalizeAnswer(userAnswer);\n    const normalizedCorrectAnswer = this.normalizeAnswer(correctAnswer);\n\n    // Exact match\n    if (normalizedUserAnswer === normalizedCorrectAnswer) {\n      result.isCorrect = true;\n      result.score = 1;\n      result.feedback = this.getRandomFeedback('CORRECT');\n      return result;\n    }\n\n    // Partial credit for numerical answers\n    if (this.isNumeric(normalizedUserAnswer) && this.isNumeric(normalizedCorrectAnswer)) {\n      const userNum = parseFloat(normalizedUserAnswer);\n      const correctNum = parseFloat(normalizedCorrectAnswer);\n\n      // Check if answer is within 10% of correct answer\n      const difference = Math.abs(userNum - correctNum);\n      const percentageDiff = difference / correctNum;\n      if (percentageDiff <= 0.1) {\n        result.partialCredit = true;\n        result.score = 0.5;\n        result.feedback = this.getRandomFeedback('PARTIAL');\n        return result;\n      }\n    }\n\n    // Check for common mistakes\n    const commonMistake = this.checkCommonMistakes(normalizedUserAnswer, normalizedCorrectAnswer, questionType);\n    if (commonMistake) {\n      result.feedback = commonMistake;\n      result.score = 0;\n    } else {\n      result.feedback = this.getRandomFeedback('INCORRECT');\n      result.score = 0;\n    }\n    return result;\n  }\n  normalizeAnswer(answer) {\n    if (!answer) return '';\n    return answer.toString().toLowerCase().trim();\n  }\n  isNumeric(str) {\n    return !isNaN(str) && !isNaN(parseFloat(str));\n  }\n  getRandomFeedback(type) {\n    const templates = FEEDBACK_TEMPLATES[type];\n    return templates[Math.floor(Math.random() * templates.length)];\n  }\n  checkCommonMistakes(userAnswer, correctAnswer, questionType) {\n    const mistakes = {\n      BASIC_OPERATIONS: {\n        addition: (user, correct) => {\n          if (user === (parseInt(correct) + 1).toString()) {\n            return \"Remember to count carefully. You're off by 1.\";\n          }\n          return null;\n        },\n        subtraction: (user, correct) => {\n          if (user === (parseInt(correct) - 1).toString()) {\n            return \"Check your subtraction. You're off by 1.\";\n          }\n          return null;\n        },\n        multiplication: (user, correct) => {\n          if (user === (parseInt(correct) * 2).toString()) {\n            return \"Remember multiplication is repeated addition.\";\n          }\n          return null;\n        },\n        division: (user, correct) => {\n          if (user === (parseInt(correct) * 2).toString()) {\n            return \"Remember division is sharing equally.\";\n          }\n          return null;\n        }\n      },\n      PLACE_VALUE: {\n        digit: (user, correct) => {\n          if (user.length === correct.length && user !== correct) {\n            return \"Check which place value you're looking at.\";\n          }\n          return null;\n        }\n      },\n      MONEY: {\n        cents: (user, correct) => {\n          if (user === (parseInt(correct) * 100).toString()) {\n            return \"Remember to convert dollars to cents correctly.\";\n          }\n          return null;\n        }\n      }\n    };\n    if (mistakes[questionType]) {\n      for (const [operation, check] of Object.entries(mistakes[questionType])) {\n        const feedback = check(userAnswer, correctAnswer);\n        if (feedback) return feedback;\n      }\n    }\n    return null;\n  }\n  generateDetailedFeedback(assessment) {\n    const feedback = {\n      overall: '',\n      categoryBreakdown: {},\n      recommendations: []\n    };\n\n    // Calculate overall performance\n    const totalScore = assessment.questions.reduce((sum, q) => sum + q.score, 0);\n    const averageScore = totalScore / assessment.questions.length;\n\n    // Generate overall feedback\n    if (averageScore >= 0.9) {\n      feedback.overall = \"Outstanding performance! You've mastered this concept.\";\n    } else if (averageScore >= 0.7) {\n      feedback.overall = \"Good work! You're making solid progress.\";\n    } else {\n      feedback.overall = \"Let's review this concept together.\";\n    }\n\n    // Generate category-specific feedback\n    assessment.questions.forEach(question => {\n      if (!feedback.categoryBreakdown[question.category]) {\n        feedback.categoryBreakdown[question.category] = {\n          correct: 0,\n          total: 0,\n          feedback: []\n        };\n      }\n      const category = feedback.categoryBreakdown[question.category];\n      category.total += 1;\n      if (question.score === 1) {\n        category.correct += 1;\n      }\n      category.feedback.push(this.gradeAnswer(question.userAnswer, question.answer, question.category).feedback);\n    });\n\n    // Generate recommendations\n    Object.entries(feedback.categoryBreakdown).forEach(([category, data]) => {\n      const accuracy = data.correct / data.total;\n      if (accuracy < 0.7) {\n        feedback.recommendations.push(`Practice more ${category.toLowerCase()} problems.`);\n      }\n    });\n    return feedback;\n  }\n}","map":{"version":3,"names":["FEEDBACK_TEMPLATES","CORRECT","PARTIAL","INCORRECT","GradingSystem","constructor","feedbackHistory","gradeAnswer","userAnswer","correctAnswer","questionType","result","isCorrect","score","feedback","partialCredit","normalizedUserAnswer","normalizeAnswer","normalizedCorrectAnswer","getRandomFeedback","isNumeric","userNum","parseFloat","correctNum","difference","Math","abs","percentageDiff","commonMistake","checkCommonMistakes","answer","toString","toLowerCase","trim","str","isNaN","type","templates","floor","random","length","mistakes","BASIC_OPERATIONS","addition","user","correct","parseInt","subtraction","multiplication","division","PLACE_VALUE","digit","MONEY","cents","operation","check","Object","entries","generateDetailedFeedback","assessment","overall","categoryBreakdown","recommendations","totalScore","questions","reduce","sum","q","averageScore","forEach","question","category","total","push","data","accuracy"],"sources":["C:/Users/asus/OneDrive/Desktop/autom/client/src/utils/automation/gradingSystem.js"],"sourcesContent":["// Automated Grading and Feedback System\r\nconst FEEDBACK_TEMPLATES = {\r\n  CORRECT: [\r\n    \"Excellent work!\",\r\n    \"Perfect answer!\",\r\n    \"You've got it!\",\r\n    \"Well done!\",\r\n    \"That's correct!\"\r\n  ],\r\n  PARTIAL: [\r\n    \"Close! Let's try again.\",\r\n    \"Almost there!\",\r\n    \"You're on the right track.\",\r\n    \"Good attempt, but not quite.\",\r\n    \"Getting closer!\"\r\n  ],\r\n  INCORRECT: [\r\n    \"Let's try a different approach.\",\r\n    \"Not quite right. Would you like a hint?\",\r\n    \"Let's review this concept.\",\r\n    \"Try breaking it down into steps.\",\r\n    \"Remember to check your work.\"\r\n  ]\r\n};\r\n\r\nexport class GradingSystem {\r\n  constructor() {\r\n    this.feedbackHistory = [];\r\n  }\r\n\r\n  gradeAnswer(userAnswer, correctAnswer, questionType) {\r\n    const result = {\r\n      isCorrect: false,\r\n      score: 0,\r\n      feedback: '',\r\n      partialCredit: false\r\n    };\r\n\r\n    // Normalize answers for comparison\r\n    const normalizedUserAnswer = this.normalizeAnswer(userAnswer);\r\n    const normalizedCorrectAnswer = this.normalizeAnswer(correctAnswer);\r\n\r\n    // Exact match\r\n    if (normalizedUserAnswer === normalizedCorrectAnswer) {\r\n      result.isCorrect = true;\r\n      result.score = 1;\r\n      result.feedback = this.getRandomFeedback('CORRECT');\r\n      return result;\r\n    }\r\n\r\n    // Partial credit for numerical answers\r\n    if (this.isNumeric(normalizedUserAnswer) && this.isNumeric(normalizedCorrectAnswer)) {\r\n      const userNum = parseFloat(normalizedUserAnswer);\r\n      const correctNum = parseFloat(normalizedCorrectAnswer);\r\n      \r\n      // Check if answer is within 10% of correct answer\r\n      const difference = Math.abs(userNum - correctNum);\r\n      const percentageDiff = difference / correctNum;\r\n      \r\n      if (percentageDiff <= 0.1) {\r\n        result.partialCredit = true;\r\n        result.score = 0.5;\r\n        result.feedback = this.getRandomFeedback('PARTIAL');\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // Check for common mistakes\r\n    const commonMistake = this.checkCommonMistakes(\r\n      normalizedUserAnswer,\r\n      normalizedCorrectAnswer,\r\n      questionType\r\n    );\r\n\r\n    if (commonMistake) {\r\n      result.feedback = commonMistake;\r\n      result.score = 0;\r\n    } else {\r\n      result.feedback = this.getRandomFeedback('INCORRECT');\r\n      result.score = 0;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  normalizeAnswer(answer) {\r\n    if (!answer) return '';\r\n    return answer.toString().toLowerCase().trim();\r\n  }\r\n\r\n  isNumeric(str) {\r\n    return !isNaN(str) && !isNaN(parseFloat(str));\r\n  }\r\n\r\n  getRandomFeedback(type) {\r\n    const templates = FEEDBACK_TEMPLATES[type];\r\n    return templates[Math.floor(Math.random() * templates.length)];\r\n  }\r\n\r\n  checkCommonMistakes(userAnswer, correctAnswer, questionType) {\r\n    const mistakes = {\r\n      BASIC_OPERATIONS: {\r\n        addition: (user, correct) => {\r\n          if (user === (parseInt(correct) + 1).toString()) {\r\n            return \"Remember to count carefully. You're off by 1.\";\r\n          }\r\n          return null;\r\n        },\r\n        subtraction: (user, correct) => {\r\n          if (user === (parseInt(correct) - 1).toString()) {\r\n            return \"Check your subtraction. You're off by 1.\";\r\n          }\r\n          return null;\r\n        },\r\n        multiplication: (user, correct) => {\r\n          if (user === (parseInt(correct) * 2).toString()) {\r\n            return \"Remember multiplication is repeated addition.\";\r\n          }\r\n          return null;\r\n        },\r\n        division: (user, correct) => {\r\n          if (user === (parseInt(correct) * 2).toString()) {\r\n            return \"Remember division is sharing equally.\";\r\n          }\r\n          return null;\r\n        }\r\n      },\r\n      PLACE_VALUE: {\r\n        digit: (user, correct) => {\r\n          if (user.length === correct.length && user !== correct) {\r\n            return \"Check which place value you're looking at.\";\r\n          }\r\n          return null;\r\n        }\r\n      },\r\n      MONEY: {\r\n        cents: (user, correct) => {\r\n          if (user === (parseInt(correct) * 100).toString()) {\r\n            return \"Remember to convert dollars to cents correctly.\";\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n    };\r\n\r\n    if (mistakes[questionType]) {\r\n      for (const [operation, check] of Object.entries(mistakes[questionType])) {\r\n        const feedback = check(userAnswer, correctAnswer);\r\n        if (feedback) return feedback;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  generateDetailedFeedback(assessment) {\r\n    const feedback = {\r\n      overall: '',\r\n      categoryBreakdown: {},\r\n      recommendations: []\r\n    };\r\n\r\n    // Calculate overall performance\r\n    const totalScore = assessment.questions.reduce(\r\n      (sum, q) => sum + q.score, 0\r\n    );\r\n    const averageScore = totalScore / assessment.questions.length;\r\n\r\n    // Generate overall feedback\r\n    if (averageScore >= 0.9) {\r\n      feedback.overall = \"Outstanding performance! You've mastered this concept.\";\r\n    } else if (averageScore >= 0.7) {\r\n      feedback.overall = \"Good work! You're making solid progress.\";\r\n    } else {\r\n      feedback.overall = \"Let's review this concept together.\";\r\n    }\r\n\r\n    // Generate category-specific feedback\r\n    assessment.questions.forEach(question => {\r\n      if (!feedback.categoryBreakdown[question.category]) {\r\n        feedback.categoryBreakdown[question.category] = {\r\n          correct: 0,\r\n          total: 0,\r\n          feedback: []\r\n        };\r\n      }\r\n\r\n      const category = feedback.categoryBreakdown[question.category];\r\n      category.total += 1;\r\n      if (question.score === 1) {\r\n        category.correct += 1;\r\n      }\r\n      category.feedback.push(this.gradeAnswer(\r\n        question.userAnswer,\r\n        question.answer,\r\n        question.category\r\n      ).feedback);\r\n    });\r\n\r\n    // Generate recommendations\r\n    Object.entries(feedback.categoryBreakdown).forEach(([category, data]) => {\r\n      const accuracy = data.correct / data.total;\r\n      if (accuracy < 0.7) {\r\n        feedback.recommendations.push(\r\n          `Practice more ${category.toLowerCase()} problems.`\r\n        );\r\n      }\r\n    });\r\n\r\n    return feedback;\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}